
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08000c18  08000c18  00010c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c54  08000c54  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08000c54  08000c54  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c54  08000c54  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c54  08000c54  00010c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c58  08000c58  00010c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08000c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000038  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b0  200000b0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000052a0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000146e  00000000  00000000  00025348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004d0  00000000  00000000  000267b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000418  00000000  00000000  00026c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f03  00000000  00000000  000270a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006145  00000000  00000000  00049fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c574c  00000000  00000000  000500e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00115834  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001548  00000000  00000000  00115884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000c00 	.word	0x08000c00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08000c00 	.word	0x08000c00

080001c8 <_ZN14ADC7828_Device10GetAddressEv>:
{
   return resolution;
}

const uint8_t ADC7828_Device::GetAddress()
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
   return address;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	7b5b      	ldrb	r3, [r3, #13]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr

080001e0 <_ZN14ADC7828_Device12SetPinConfigEh>:

void ADC7828_Device::SetPinConfig(uint8_t pinRegister)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	460b      	mov	r3, r1
 80001ea:	70fb      	strb	r3, [r7, #3]
	pinConfig = pinRegister;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	78fa      	ldrb	r2, [r7, #3]
 80001f0:	711a      	strb	r2, [r3, #4]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr

080001fe <_ZN14ADC7828_Device12GetPinConfigEv>:

uint8_t ADC7828_Device::GetPinConfig()
{
 80001fe:	b480      	push	{r7}
 8000200:	b083      	sub	sp, #12
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	return pinConfig;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	791b      	ldrb	r3, [r3, #4]
}
 800020a:	4618      	mov	r0, r3
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr

08000216 <_ZN14ADC7828_Device7ReadADCEPt>:
* 				by default, internal reference and ADC is turned on(bits PD[1..0])
* @param	adcData pointer to target memory for adc data
* @retval HAL status
*/
HAL_StatusTypeDef ADC7828_Device::ReadADC(uint16_t *data)
{
 8000216:	b480      	push	{r7}
 8000218:	b083      	sub	sp, #12
 800021a:	af00      	add	r7, sp, #0
 800021c:	6078      	str	r0, [r7, #4]
 800021e:	6039      	str	r1, [r7, #0]
		return returnVal;
	}

	// Assemble adc reading data from two bytes
	*data = ((adData[0] & 0x0F) << 8) | adData[1]; // combine 2 bytes and remove 4 zeros*/
	return HAL_OK;
 8000220:	2300      	movs	r3, #0
}
 8000222:	4618      	mov	r0, r3
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <_ZN14ADC7828_Device10ADC_ToVoltEtPf>:
* @param  adcval  value of adc to convert
* @param  voltage converted adc value
* @retval HAL status
*/
void ADC7828_Device::ADC_ToVolt(uint16_t value, float *voltage)
{
 800022e:	b480      	push	{r7}
 8000230:	b085      	sub	sp, #20
 8000232:	af00      	add	r7, sp, #0
 8000234:	60f8      	str	r0, [r7, #12]
 8000236:	460b      	mov	r3, r1
 8000238:	607a      	str	r2, [r7, #4]
 800023a:	817b      	strh	r3, [r7, #10]
	*voltage = value * vRef / (float)((1<< resolution) -1); //formula for adc(s)
 800023c:	897b      	ldrh	r3, [r7, #10]
 800023e:	ee07 3a90 	vmov	s15, r3
 8000242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	edd3 7a02 	vldr	s15, [r3, #8]
 800024c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7b1b      	ldrb	r3, [r3, #12]
 8000254:	461a      	mov	r2, r3
 8000256:	2301      	movs	r3, #1
 8000258:	4093      	lsls	r3, r2
 800025a:	3b01      	subs	r3, #1
 800025c:	ee07 3a90 	vmov	s15, r3
 8000260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	edc3 7a00 	vstr	s15, [r3]
}
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr

0800027a <_ZN15Max30205_Device10GetAddressEv>:
#include "MaxDevice.h"

#pragma region GettersAndSetters

const uint8_t Max30205_Device::GetAddress()
{
 800027a:	b480      	push	{r7}
 800027c:	b083      	sub	sp, #12
 800027e:	af00      	add	r7, sp, #0
 8000280:	6078      	str	r0, [r7, #4]
   return address;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	795b      	ldrb	r3, [r3, #5]
}
 8000286:	4618      	mov	r0, r3
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <_ZN15Max30205_Device12SetPinConfigEh>:

void Max30205_Device::SetPinConfig(uint8_t pinRegister)
{
 8000292:	b480      	push	{r7}
 8000294:	b083      	sub	sp, #12
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	460b      	mov	r3, r1
 800029c:	70fb      	strb	r3, [r7, #3]
	pinConfig = pinRegister;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	78fa      	ldrb	r2, [r7, #3]
 80002a2:	711a      	strb	r2, [r3, #4]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <_ZN15Max30205_Device12GetPinConfigEv>:

uint8_t Max30205_Device::GetPinConfig()
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	return pinConfig;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	791b      	ldrb	r3, [r3, #4]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <_ZN15Max30205_Device11MaxReadTempEPf>:
* @param	temp pointer to target memory for temperature data
* @retval HAL status
*/

HAL_StatusTypeDef Max30205_Device::MaxReadTemp(float *temp)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]

	// Convert to temperature
	// Datasheet shows that digits are powers of two in temperature degree C
	*temp = ( (tempData[0] << 8) | tempData[1]) *0.00390625;*/

	return HAL_OK;
 80002d2:	2300      	movs	r3, #0
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <_Z15SetDevPinConfigP16DevicesInterfaceh>:
#include "PinRegisters.h"

void SystemClock_Config(void);

inline void SetDevPinConfig(DevicesInterface* device, uint8_t pinRegister)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	70fb      	strb	r3, [r7, #3]
    device->SetPinConfig(pinRegister);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	3304      	adds	r3, #4
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	78fa      	ldrb	r2, [r7, #3]
 80002f6:	4611      	mov	r1, r2
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	4798      	blx	r3
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <_ZN16DevicesInterfaceC1Ev>:
#pragma once
#include <cstdint>

class DevicesInterface
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <_ZN16DevicesInterfaceC1Ev+0x1c>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4618      	mov	r0, r3
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	08000c48 	.word	0x08000c48

08000324 <_ZN14ADC7828_DeviceC1Ev>:
#include "stm32f4xx_hal_i2c.h"
#include "stm32f4xx_hal_def.h"

extern I2C_HandleTypeDef hi2c1;

class ADC7828_Device : public DevicesInterface
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ffe8 	bl	8000304 <_ZN16DevicesInterfaceC1Ev>
 8000334:	4a08      	ldr	r2, [pc, #32]	; (8000358 <_ZN14ADC7828_DeviceC1Ev+0x34>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a07      	ldr	r2, [pc, #28]	; (800035c <_ZN14ADC7828_DeviceC1Ev+0x38>)
 800033e:	609a      	str	r2, [r3, #8]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	220c      	movs	r2, #12
 8000344:	731a      	strb	r2, [r3, #12]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2249      	movs	r2, #73	; 0x49
 800034a:	735a      	strb	r2, [r3, #13]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4618      	mov	r0, r3
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	08000c20 	.word	0x08000c20
 800035c:	401f7cee 	.word	0x401f7cee

08000360 <_ZN15Max30205_DeviceC1Ev>:
#include "stm32f4xx_hal_i2c.h"
#include "stm32f4xx_hal_def.h"

extern I2C_HandleTypeDef hi2c1;

class Max30205_Device : public DevicesInterface
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ffca 	bl	8000304 <_ZN16DevicesInterfaceC1Ev>
 8000370:	4a05      	ldr	r2, [pc, #20]	; (8000388 <_ZN15Max30205_DeviceC1Ev+0x28>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2290      	movs	r2, #144	; 0x90
 800037a:	715a      	strb	r2, [r3, #5]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4618      	mov	r0, r3
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	08000c34 	.word	0x08000c34

0800038c <main>:

int main(void)
{
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b087      	sub	sp, #28
 8000390:	af00      	add	r7, sp, #0
  HAL_Init();
 8000392:	f000 f941 	bl	8000618 <HAL_Init>

//HAL_GPIO_Init();
//HAL_I2C_Init();

  uint16_t adData = 0; //store a 12 bit value
 8000396:	2300      	movs	r3, #0
 8000398:	817b      	strh	r3, [r7, #10]
  float voltage = 0; // store a converted adc val
 800039a:	f04f 0300 	mov.w	r3, #0
 800039e:	607b      	str	r3, [r7, #4]
  float temperature = 0 ;
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	603b      	str	r3, [r7, #0]

  float voltDivCoef = 1.0f;
 80003a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80003aa:	617b      	str	r3, [r7, #20]

  ADC7828_Device* adcDevice = new ADC7828_Device;
 80003ac:	2010      	movs	r0, #16
 80003ae:	f000 fac8 	bl	8000942 <_Znwj>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461c      	mov	r4, r3
 80003b6:	4620      	mov	r0, r4
 80003b8:	f7ff ffb4 	bl	8000324 <_ZN14ADC7828_DeviceC1Ev>
 80003bc:	613c      	str	r4, [r7, #16]
  Max30205_Device* maxDevice = new  Max30205_Device;
 80003be:	2008      	movs	r0, #8
 80003c0:	f000 fabf 	bl	8000942 <_Znwj>
 80003c4:	4603      	mov	r3, r0
 80003c6:	461c      	mov	r4, r3
 80003c8:	4620      	mov	r0, r4
 80003ca:	f7ff ffc9 	bl	8000360 <_ZN15Max30205_DeviceC1Ev>
 80003ce:	60fc      	str	r4, [r7, #12]

  while (1)
  {
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80003d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d4:	481b      	ldr	r0, [pc, #108]	; (8000444 <main+0xb8>)
 80003d6:	f000 fa9a 	bl	800090e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80003da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003de:	f000 f98d 	bl	80006fc <HAL_Delay>

	SetDevPinConfig(adcDevice, pinReg.ADC7828);
 80003e2:	4b19      	ldr	r3, [pc, #100]	; (8000448 <main+0xbc>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4619      	mov	r1, r3
 80003e8:	6938      	ldr	r0, [r7, #16]
 80003ea:	f7ff ff79 	bl	80002e0 <_Z15SetDevPinConfigP16DevicesInterfaceh>
	adcDevice->ReadADC(&adData);
 80003ee:	f107 030a 	add.w	r3, r7, #10
 80003f2:	4619      	mov	r1, r3
 80003f4:	6938      	ldr	r0, [r7, #16]
 80003f6:	f7ff ff0e 	bl	8000216 <_ZN14ADC7828_Device7ReadADCEPt>

	adData *= voltDivCoef; // voltage divider
 80003fa:	897b      	ldrh	r3, [r7, #10]
 80003fc:	ee07 3a90 	vmov	s15, r3
 8000400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000404:	edd7 7a05 	vldr	s15, [r7, #20]
 8000408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800040c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000410:	ee17 3a90 	vmov	r3, s15
 8000414:	b29b      	uxth	r3, r3
 8000416:	817b      	strh	r3, [r7, #10]

	adcDevice->ADC_ToVolt(adData, &voltage);
 8000418:	897b      	ldrh	r3, [r7, #10]
 800041a:	1d3a      	adds	r2, r7, #4
 800041c:	4619      	mov	r1, r3
 800041e:	6938      	ldr	r0, [r7, #16]
 8000420:	f7ff ff05 	bl	800022e <_ZN14ADC7828_Device10ADC_ToVoltEtPf>

	SetDevPinConfig(maxDevice, pinReg.Max30205);
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <main+0xbc>)
 8000426:	785b      	ldrb	r3, [r3, #1]
 8000428:	4619      	mov	r1, r3
 800042a:	68f8      	ldr	r0, [r7, #12]
 800042c:	f7ff ff58 	bl	80002e0 <_Z15SetDevPinConfigP16DevicesInterfaceh>
	maxDevice->MaxReadTemp(&temperature);
 8000430:	463b      	mov	r3, r7
 8000432:	4619      	mov	r1, r3
 8000434:	68f8      	ldr	r0, [r7, #12]
 8000436:	f7ff ff47 	bl	80002c8 <_ZN15Max30205_Device11MaxReadTempEPf>

  	HAL_Delay(100);
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f000 f95e 	bl	80006fc <HAL_Delay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000440:	e7c6      	b.n	80003d0 <main+0x44>
 8000442:	bf00      	nop
 8000444:	40020c00 	.word	0x40020c00
 8000448:	20000000 	.word	0x20000000

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	2300      	movs	r3, #0
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <HAL_MspInit+0x4c>)
 8000458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800045a:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <HAL_MspInit+0x4c>)
 800045c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000460:	6453      	str	r3, [r2, #68]	; 0x44
 8000462:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <HAL_MspInit+0x4c>)
 8000464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	2300      	movs	r3, #0
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <HAL_MspInit+0x4c>)
 8000474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000476:	4a08      	ldr	r2, [pc, #32]	; (8000498 <HAL_MspInit+0x4c>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800047c:	6413      	str	r3, [r2, #64]	; 0x40
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <HAL_MspInit+0x4c>)
 8000480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800048a:	2007      	movs	r0, #7
 800048c:	f000 fa0c 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40023800 	.word	0x40023800

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e8:	f000 f8e8 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
	return 1;
 80004f4:	2301      	movs	r3, #1
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <_kill>:

int _kill(int pid, int sig)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800050a:	f000 fa51 	bl	80009b0 <__errno>
 800050e:	4603      	mov	r3, r0
 8000510:	2216      	movs	r2, #22
 8000512:	601a      	str	r2, [r3, #0]
	return -1;
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <_exit>:

void _exit (int status)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000528:	f04f 31ff 	mov.w	r1, #4294967295
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ffe7 	bl	8000500 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000532:	e7fe      	b.n	8000532 <_exit+0x12>

08000534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <_sbrk+0x5c>)
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <_sbrk+0x60>)
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d102      	bne.n	8000556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <_sbrk+0x64>)
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <_sbrk+0x68>)
 8000554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <_sbrk+0x64>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	429a      	cmp	r2, r3
 8000562:	d207      	bcs.n	8000574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000564:	f000 fa24 	bl	80009b0 <__errno>
 8000568:	4603      	mov	r3, r0
 800056a:	220c      	movs	r2, #12
 800056c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	e009      	b.n	8000588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <_sbrk+0x64>)
 8000584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20020000 	.word	0x20020000
 8000594:	00000400 	.word	0x00000400
 8000598:	20000094 	.word	0x20000094
 800059c:	200000b0 	.word	0x200000b0

080005a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <SystemInit+0x20>)
 80005a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005aa:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <SystemInit+0x20>)
 80005ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80005c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ca:	490e      	ldr	r1, [pc, #56]	; (8000604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d0:	e002      	b.n	80005d8 <LoopCopyDataInit>

080005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d6:	3304      	adds	r3, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005dc:	d3f9      	bcc.n	80005d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005de:	4a0b      	ldr	r2, [pc, #44]	; (800060c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005e0:	4c0b      	ldr	r4, [pc, #44]	; (8000610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e4:	e001      	b.n	80005ea <LoopFillZerobss>

080005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e8:	3204      	adds	r2, #4

080005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ec:	d3fb      	bcc.n	80005e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005ee:	f7ff ffd7 	bl	80005a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005f2:	f000 f9e3 	bl	80009bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f6:	f7ff fec9 	bl	800038c <main>
  bx  lr    
 80005fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000608:	08000c5c 	.word	0x08000c5c
  ldr r2, =_sbss
 800060c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000610:	200000b0 	.word	0x200000b0

08000614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC_IRQHandler>
	...

08000618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_Init+0x40>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <HAL_Init+0x40>)
 8000622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <HAL_Init+0x40>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <HAL_Init+0x40>)
 800062e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_Init+0x40>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <HAL_Init+0x40>)
 800063a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f931 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f808 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff fefe 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023c00 	.word	0x40023c00

0800065c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_InitTick+0x54>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_InitTick+0x58>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f93b 	bl	80008f6 <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e00e      	b.n	80006a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d80a      	bhi.n	80006a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 f911 	bl	80008be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <HAL_InitTick+0x5c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e000      	b.n	80006a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000004 	.word	0x20000004
 80006b4:	2000000c 	.word	0x2000000c
 80006b8:	20000008 	.word	0x20000008

080006bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_IncTick+0x20>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_IncTick+0x24>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_IncTick+0x24>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2000000c 	.word	0x2000000c
 80006e0:	20000098 	.word	0x20000098

080006e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <HAL_GetTick+0x14>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000098 	.word	0x20000098

080006fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000704:	f7ff ffee 	bl	80006e4 <HAL_GetTick>
 8000708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000714:	d005      	beq.n	8000722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_Delay+0x44>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4413      	add	r3, r2
 8000720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000722:	bf00      	nop
 8000724:	f7ff ffde 	bl	80006e4 <HAL_GetTick>
 8000728:	4602      	mov	r2, r0
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	429a      	cmp	r2, r3
 8000732:	d8f7      	bhi.n	8000724 <HAL_Delay+0x28>
  {
  }
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000000c 	.word	0x2000000c

08000744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <__NVIC_SetPriorityGrouping+0x44>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800076c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000776:	4a04      	ldr	r2, [pc, #16]	; (8000788 <__NVIC_SetPriorityGrouping+0x44>)
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	60d3      	str	r3, [r2, #12]
}
 800077c:	bf00      	nop
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	f003 0307 	and.w	r3, r3, #7
}
 800079a:	4618      	mov	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	db0a      	blt.n	80007d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	490c      	ldr	r1, [pc, #48]	; (80007f4 <__NVIC_SetPriority+0x4c>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	0112      	lsls	r2, r2, #4
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	440b      	add	r3, r1
 80007cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d0:	e00a      	b.n	80007e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4908      	ldr	r1, [pc, #32]	; (80007f8 <__NVIC_SetPriority+0x50>)
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	3b04      	subs	r3, #4
 80007e0:	0112      	lsls	r2, r2, #4
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	761a      	strb	r2, [r3, #24]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000e100 	.word	0xe000e100
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b089      	sub	sp, #36	; 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	f1c3 0307 	rsb	r3, r3, #7
 8000816:	2b04      	cmp	r3, #4
 8000818:	bf28      	it	cs
 800081a:	2304      	movcs	r3, #4
 800081c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3304      	adds	r3, #4
 8000822:	2b06      	cmp	r3, #6
 8000824:	d902      	bls.n	800082c <NVIC_EncodePriority+0x30>
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3b03      	subs	r3, #3
 800082a:	e000      	b.n	800082e <NVIC_EncodePriority+0x32>
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	f04f 32ff 	mov.w	r2, #4294967295
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43da      	mvns	r2, r3
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	401a      	ands	r2, r3
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000844:	f04f 31ff 	mov.w	r1, #4294967295
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	43d9      	mvns	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	4313      	orrs	r3, r2
         );
}
 8000856:	4618      	mov	r0, r3
 8000858:	3724      	adds	r7, #36	; 0x24
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
	...

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000874:	d301      	bcc.n	800087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2301      	movs	r3, #1
 8000878:	e00f      	b.n	800089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <SysTick_Config+0x40>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000882:	210f      	movs	r1, #15
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f7ff ff8e 	bl	80007a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SysTick_Config+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Config+0x40>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff47 	bl	8000744 <__NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff5c 	bl	800078c <__NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ff8e 	bl	80007fc <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff5d 	bl	80007a8 <__NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff ffb0 	bl	8000864 <SysTick_Config>
 8000904:	4603      	mov	r3, r0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800090e:	b480      	push	{r7}
 8000910:	b085      	sub	sp, #20
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	460b      	mov	r3, r1
 8000918:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000920:	887a      	ldrh	r2, [r7, #2]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4013      	ands	r3, r2
 8000926:	041a      	lsls	r2, r3, #16
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	43d9      	mvns	r1, r3
 800092c:	887b      	ldrh	r3, [r7, #2]
 800092e:	400b      	ands	r3, r1
 8000930:	431a      	orrs	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	619a      	str	r2, [r3, #24]
}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <_Znwj>:
 8000942:	2801      	cmp	r0, #1
 8000944:	bf38      	it	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	b510      	push	{r4, lr}
 800094a:	4604      	mov	r4, r0
 800094c:	4620      	mov	r0, r4
 800094e:	f000 f859 	bl	8000a04 <malloc>
 8000952:	b930      	cbnz	r0, 8000962 <_Znwj+0x20>
 8000954:	f000 f81c 	bl	8000990 <_ZSt15get_new_handlerv>
 8000958:	b908      	cbnz	r0, 800095e <_Znwj+0x1c>
 800095a:	f000 f821 	bl	80009a0 <abort>
 800095e:	4780      	blx	r0
 8000960:	e7f4      	b.n	800094c <_Znwj+0xa>
 8000962:	bd10      	pop	{r4, pc}

08000964 <__cxa_pure_virtual>:
 8000964:	b508      	push	{r3, lr}
 8000966:	f000 f80d 	bl	8000984 <_ZSt9terminatev>

0800096a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800096a:	b508      	push	{r3, lr}
 800096c:	4780      	blx	r0
 800096e:	f000 f817 	bl	80009a0 <abort>
	...

08000974 <_ZSt13get_terminatev>:
 8000974:	4b02      	ldr	r3, [pc, #8]	; (8000980 <_ZSt13get_terminatev+0xc>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	f3bf 8f5b 	dmb	ish
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000010 	.word	0x20000010

08000984 <_ZSt9terminatev>:
 8000984:	b508      	push	{r3, lr}
 8000986:	f7ff fff5 	bl	8000974 <_ZSt13get_terminatev>
 800098a:	f7ff ffee 	bl	800096a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08000990 <_ZSt15get_new_handlerv>:
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <_ZSt15get_new_handlerv+0xc>)
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	f3bf 8f5b 	dmb	ish
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	2000009c 	.word	0x2000009c

080009a0 <abort>:
 80009a0:	b508      	push	{r3, lr}
 80009a2:	2006      	movs	r0, #6
 80009a4:	f000 f902 	bl	8000bac <raise>
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fdb9 	bl	8000520 <_exit>
	...

080009b0 <__errno>:
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <__errno+0x8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000014 	.word	0x20000014

080009bc <__libc_init_array>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	4d0d      	ldr	r5, [pc, #52]	; (80009f4 <__libc_init_array+0x38>)
 80009c0:	4c0d      	ldr	r4, [pc, #52]	; (80009f8 <__libc_init_array+0x3c>)
 80009c2:	1b64      	subs	r4, r4, r5
 80009c4:	10a4      	asrs	r4, r4, #2
 80009c6:	2600      	movs	r6, #0
 80009c8:	42a6      	cmp	r6, r4
 80009ca:	d109      	bne.n	80009e0 <__libc_init_array+0x24>
 80009cc:	4d0b      	ldr	r5, [pc, #44]	; (80009fc <__libc_init_array+0x40>)
 80009ce:	4c0c      	ldr	r4, [pc, #48]	; (8000a00 <__libc_init_array+0x44>)
 80009d0:	f000 f916 	bl	8000c00 <_init>
 80009d4:	1b64      	subs	r4, r4, r5
 80009d6:	10a4      	asrs	r4, r4, #2
 80009d8:	2600      	movs	r6, #0
 80009da:	42a6      	cmp	r6, r4
 80009dc:	d105      	bne.n	80009ea <__libc_init_array+0x2e>
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e4:	4798      	blx	r3
 80009e6:	3601      	adds	r6, #1
 80009e8:	e7ee      	b.n	80009c8 <__libc_init_array+0xc>
 80009ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ee:	4798      	blx	r3
 80009f0:	3601      	adds	r6, #1
 80009f2:	e7f2      	b.n	80009da <__libc_init_array+0x1e>
 80009f4:	08000c54 	.word	0x08000c54
 80009f8:	08000c54 	.word	0x08000c54
 80009fc:	08000c54 	.word	0x08000c54
 8000a00:	08000c58 	.word	0x08000c58

08000a04 <malloc>:
 8000a04:	4b02      	ldr	r3, [pc, #8]	; (8000a10 <malloc+0xc>)
 8000a06:	4601      	mov	r1, r0
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	f000 b823 	b.w	8000a54 <_malloc_r>
 8000a0e:	bf00      	nop
 8000a10:	20000014 	.word	0x20000014

08000a14 <sbrk_aligned>:
 8000a14:	b570      	push	{r4, r5, r6, lr}
 8000a16:	4e0e      	ldr	r6, [pc, #56]	; (8000a50 <sbrk_aligned+0x3c>)
 8000a18:	460c      	mov	r4, r1
 8000a1a:	6831      	ldr	r1, [r6, #0]
 8000a1c:	4605      	mov	r5, r0
 8000a1e:	b911      	cbnz	r1, 8000a26 <sbrk_aligned+0x12>
 8000a20:	f000 f88c 	bl	8000b3c <_sbrk_r>
 8000a24:	6030      	str	r0, [r6, #0]
 8000a26:	4621      	mov	r1, r4
 8000a28:	4628      	mov	r0, r5
 8000a2a:	f000 f887 	bl	8000b3c <_sbrk_r>
 8000a2e:	1c43      	adds	r3, r0, #1
 8000a30:	d00a      	beq.n	8000a48 <sbrk_aligned+0x34>
 8000a32:	1cc4      	adds	r4, r0, #3
 8000a34:	f024 0403 	bic.w	r4, r4, #3
 8000a38:	42a0      	cmp	r0, r4
 8000a3a:	d007      	beq.n	8000a4c <sbrk_aligned+0x38>
 8000a3c:	1a21      	subs	r1, r4, r0
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f000 f87c 	bl	8000b3c <_sbrk_r>
 8000a44:	3001      	adds	r0, #1
 8000a46:	d101      	bne.n	8000a4c <sbrk_aligned+0x38>
 8000a48:	f04f 34ff 	mov.w	r4, #4294967295
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	200000a4 	.word	0x200000a4

08000a54 <_malloc_r>:
 8000a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a58:	1ccd      	adds	r5, r1, #3
 8000a5a:	f025 0503 	bic.w	r5, r5, #3
 8000a5e:	3508      	adds	r5, #8
 8000a60:	2d0c      	cmp	r5, #12
 8000a62:	bf38      	it	cc
 8000a64:	250c      	movcc	r5, #12
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	4607      	mov	r7, r0
 8000a6a:	db01      	blt.n	8000a70 <_malloc_r+0x1c>
 8000a6c:	42a9      	cmp	r1, r5
 8000a6e:	d905      	bls.n	8000a7c <_malloc_r+0x28>
 8000a70:	230c      	movs	r3, #12
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	2600      	movs	r6, #0
 8000a76:	4630      	mov	r0, r6
 8000a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a7c:	4e2e      	ldr	r6, [pc, #184]	; (8000b38 <_malloc_r+0xe4>)
 8000a7e:	f000 f8b1 	bl	8000be4 <__malloc_lock>
 8000a82:	6833      	ldr	r3, [r6, #0]
 8000a84:	461c      	mov	r4, r3
 8000a86:	bb34      	cbnz	r4, 8000ad6 <_malloc_r+0x82>
 8000a88:	4629      	mov	r1, r5
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	f7ff ffc2 	bl	8000a14 <sbrk_aligned>
 8000a90:	1c43      	adds	r3, r0, #1
 8000a92:	4604      	mov	r4, r0
 8000a94:	d14d      	bne.n	8000b32 <_malloc_r+0xde>
 8000a96:	6834      	ldr	r4, [r6, #0]
 8000a98:	4626      	mov	r6, r4
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d140      	bne.n	8000b20 <_malloc_r+0xcc>
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	4638      	mov	r0, r7
 8000aa4:	eb04 0803 	add.w	r8, r4, r3
 8000aa8:	f000 f848 	bl	8000b3c <_sbrk_r>
 8000aac:	4580      	cmp	r8, r0
 8000aae:	d13a      	bne.n	8000b26 <_malloc_r+0xd2>
 8000ab0:	6821      	ldr	r1, [r4, #0]
 8000ab2:	3503      	adds	r5, #3
 8000ab4:	1a6d      	subs	r5, r5, r1
 8000ab6:	f025 0503 	bic.w	r5, r5, #3
 8000aba:	3508      	adds	r5, #8
 8000abc:	2d0c      	cmp	r5, #12
 8000abe:	bf38      	it	cc
 8000ac0:	250c      	movcc	r5, #12
 8000ac2:	4629      	mov	r1, r5
 8000ac4:	4638      	mov	r0, r7
 8000ac6:	f7ff ffa5 	bl	8000a14 <sbrk_aligned>
 8000aca:	3001      	adds	r0, #1
 8000acc:	d02b      	beq.n	8000b26 <_malloc_r+0xd2>
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	442b      	add	r3, r5
 8000ad2:	6023      	str	r3, [r4, #0]
 8000ad4:	e00e      	b.n	8000af4 <_malloc_r+0xa0>
 8000ad6:	6822      	ldr	r2, [r4, #0]
 8000ad8:	1b52      	subs	r2, r2, r5
 8000ada:	d41e      	bmi.n	8000b1a <_malloc_r+0xc6>
 8000adc:	2a0b      	cmp	r2, #11
 8000ade:	d916      	bls.n	8000b0e <_malloc_r+0xba>
 8000ae0:	1961      	adds	r1, r4, r5
 8000ae2:	42a3      	cmp	r3, r4
 8000ae4:	6025      	str	r5, [r4, #0]
 8000ae6:	bf18      	it	ne
 8000ae8:	6059      	strne	r1, [r3, #4]
 8000aea:	6863      	ldr	r3, [r4, #4]
 8000aec:	bf08      	it	eq
 8000aee:	6031      	streq	r1, [r6, #0]
 8000af0:	5162      	str	r2, [r4, r5]
 8000af2:	604b      	str	r3, [r1, #4]
 8000af4:	4638      	mov	r0, r7
 8000af6:	f104 060b 	add.w	r6, r4, #11
 8000afa:	f000 f879 	bl	8000bf0 <__malloc_unlock>
 8000afe:	f026 0607 	bic.w	r6, r6, #7
 8000b02:	1d23      	adds	r3, r4, #4
 8000b04:	1af2      	subs	r2, r6, r3
 8000b06:	d0b6      	beq.n	8000a76 <_malloc_r+0x22>
 8000b08:	1b9b      	subs	r3, r3, r6
 8000b0a:	50a3      	str	r3, [r4, r2]
 8000b0c:	e7b3      	b.n	8000a76 <_malloc_r+0x22>
 8000b0e:	6862      	ldr	r2, [r4, #4]
 8000b10:	42a3      	cmp	r3, r4
 8000b12:	bf0c      	ite	eq
 8000b14:	6032      	streq	r2, [r6, #0]
 8000b16:	605a      	strne	r2, [r3, #4]
 8000b18:	e7ec      	b.n	8000af4 <_malloc_r+0xa0>
 8000b1a:	4623      	mov	r3, r4
 8000b1c:	6864      	ldr	r4, [r4, #4]
 8000b1e:	e7b2      	b.n	8000a86 <_malloc_r+0x32>
 8000b20:	4634      	mov	r4, r6
 8000b22:	6876      	ldr	r6, [r6, #4]
 8000b24:	e7b9      	b.n	8000a9a <_malloc_r+0x46>
 8000b26:	230c      	movs	r3, #12
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4638      	mov	r0, r7
 8000b2c:	f000 f860 	bl	8000bf0 <__malloc_unlock>
 8000b30:	e7a1      	b.n	8000a76 <_malloc_r+0x22>
 8000b32:	6025      	str	r5, [r4, #0]
 8000b34:	e7de      	b.n	8000af4 <_malloc_r+0xa0>
 8000b36:	bf00      	nop
 8000b38:	200000a0 	.word	0x200000a0

08000b3c <_sbrk_r>:
 8000b3c:	b538      	push	{r3, r4, r5, lr}
 8000b3e:	4d06      	ldr	r5, [pc, #24]	; (8000b58 <_sbrk_r+0x1c>)
 8000b40:	2300      	movs	r3, #0
 8000b42:	4604      	mov	r4, r0
 8000b44:	4608      	mov	r0, r1
 8000b46:	602b      	str	r3, [r5, #0]
 8000b48:	f7ff fcf4 	bl	8000534 <_sbrk>
 8000b4c:	1c43      	adds	r3, r0, #1
 8000b4e:	d102      	bne.n	8000b56 <_sbrk_r+0x1a>
 8000b50:	682b      	ldr	r3, [r5, #0]
 8000b52:	b103      	cbz	r3, 8000b56 <_sbrk_r+0x1a>
 8000b54:	6023      	str	r3, [r4, #0]
 8000b56:	bd38      	pop	{r3, r4, r5, pc}
 8000b58:	200000a8 	.word	0x200000a8

08000b5c <_raise_r>:
 8000b5c:	291f      	cmp	r1, #31
 8000b5e:	b538      	push	{r3, r4, r5, lr}
 8000b60:	4604      	mov	r4, r0
 8000b62:	460d      	mov	r5, r1
 8000b64:	d904      	bls.n	8000b70 <_raise_r+0x14>
 8000b66:	2316      	movs	r3, #22
 8000b68:	6003      	str	r3, [r0, #0]
 8000b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6e:	bd38      	pop	{r3, r4, r5, pc}
 8000b70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000b72:	b112      	cbz	r2, 8000b7a <_raise_r+0x1e>
 8000b74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8000b78:	b94b      	cbnz	r3, 8000b8e <_raise_r+0x32>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f000 f830 	bl	8000be0 <_getpid_r>
 8000b80:	462a      	mov	r2, r5
 8000b82:	4601      	mov	r1, r0
 8000b84:	4620      	mov	r0, r4
 8000b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b8a:	f000 b817 	b.w	8000bbc <_kill_r>
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d00a      	beq.n	8000ba8 <_raise_r+0x4c>
 8000b92:	1c59      	adds	r1, r3, #1
 8000b94:	d103      	bne.n	8000b9e <_raise_r+0x42>
 8000b96:	2316      	movs	r3, #22
 8000b98:	6003      	str	r3, [r0, #0]
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	e7e7      	b.n	8000b6e <_raise_r+0x12>
 8000b9e:	2400      	movs	r4, #0
 8000ba0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	4798      	blx	r3
 8000ba8:	2000      	movs	r0, #0
 8000baa:	e7e0      	b.n	8000b6e <_raise_r+0x12>

08000bac <raise>:
 8000bac:	4b02      	ldr	r3, [pc, #8]	; (8000bb8 <raise+0xc>)
 8000bae:	4601      	mov	r1, r0
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	f7ff bfd3 	b.w	8000b5c <_raise_r>
 8000bb6:	bf00      	nop
 8000bb8:	20000014 	.word	0x20000014

08000bbc <_kill_r>:
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4d07      	ldr	r5, [pc, #28]	; (8000bdc <_kill_r+0x20>)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	602b      	str	r3, [r5, #0]
 8000bca:	f7ff fc99 	bl	8000500 <_kill>
 8000bce:	1c43      	adds	r3, r0, #1
 8000bd0:	d102      	bne.n	8000bd8 <_kill_r+0x1c>
 8000bd2:	682b      	ldr	r3, [r5, #0]
 8000bd4:	b103      	cbz	r3, 8000bd8 <_kill_r+0x1c>
 8000bd6:	6023      	str	r3, [r4, #0]
 8000bd8:	bd38      	pop	{r3, r4, r5, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000a8 	.word	0x200000a8

08000be0 <_getpid_r>:
 8000be0:	f7ff bc86 	b.w	80004f0 <_getpid>

08000be4 <__malloc_lock>:
 8000be4:	4801      	ldr	r0, [pc, #4]	; (8000bec <__malloc_lock+0x8>)
 8000be6:	f000 b809 	b.w	8000bfc <__retarget_lock_acquire_recursive>
 8000bea:	bf00      	nop
 8000bec:	200000ac 	.word	0x200000ac

08000bf0 <__malloc_unlock>:
 8000bf0:	4801      	ldr	r0, [pc, #4]	; (8000bf8 <__malloc_unlock+0x8>)
 8000bf2:	f000 b804 	b.w	8000bfe <__retarget_lock_release_recursive>
 8000bf6:	bf00      	nop
 8000bf8:	200000ac 	.word	0x200000ac

08000bfc <__retarget_lock_acquire_recursive>:
 8000bfc:	4770      	bx	lr

08000bfe <__retarget_lock_release_recursive>:
 8000bfe:	4770      	bx	lr

08000c00 <_init>:
 8000c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c02:	bf00      	nop
 8000c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c06:	bc08      	pop	{r3}
 8000c08:	469e      	mov	lr, r3
 8000c0a:	4770      	bx	lr

08000c0c <_fini>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	bf00      	nop
 8000c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c12:	bc08      	pop	{r3}
 8000c14:	469e      	mov	lr, r3
 8000c16:	4770      	bx	lr
